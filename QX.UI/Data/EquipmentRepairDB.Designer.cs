//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3615
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QX.UI.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EquipmentRepairDB")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class EquipmentRepairDB : global::System.Data.DataSet {
        
        private Asset_MApplyDataTable tableAsset_MApply;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EquipmentRepairDB() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected EquipmentRepairDB(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Asset_MApply"] != null)) {
                    base.Tables.Add(new Asset_MApplyDataTable(ds.Tables["Asset_MApply"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Asset_MApplyDataTable Asset_MApply {
            get {
                return this.tableAsset_MApply;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EquipmentRepairDB cln = ((EquipmentRepairDB)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Asset_MApply"] != null)) {
                    base.Tables.Add(new Asset_MApplyDataTable(ds.Tables["Asset_MApply"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAsset_MApply = ((Asset_MApplyDataTable)(base.Tables["Asset_MApply"]));
            if ((initTable == true)) {
                if ((this.tableAsset_MApply != null)) {
                    this.tableAsset_MApply.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EquipmentRepairDB";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/EquipmentRepairDB.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAsset_MApply = new Asset_MApplyDataTable();
            base.Tables.Add(this.tableAsset_MApply);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAsset_MApply() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EquipmentRepairDB ds = new EquipmentRepairDB();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void Asset_MApplyRowChangeEventHandler(object sender, Asset_MApplyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Asset_MApplyDataTable : global::System.Data.TypedTableBase<Asset_MApplyRow> {
            
            private global::System.Data.DataColumn columnAMA_ID;
            
            private global::System.Data.DataColumn columnAMA_Code;
            
            private global::System.Data.DataColumn columnAMA_FCode;
            
            private global::System.Data.DataColumn columnAMA_FName;
            
            private global::System.Data.DataColumn columnAMA_FSpec;
            
            private global::System.Data.DataColumn columnAMA_Company;
            
            private global::System.Data.DataColumn columnAMA_Department;
            
            private global::System.Data.DataColumn columnAMA_Reason;
            
            private global::System.Data.DataColumn columnAMA_Description;
            
            private global::System.Data.DataColumn columnAMA_Date;
            
            private global::System.Data.DataColumn columnAMA_TimeCost;
            
            private global::System.Data.DataColumn columnAMA_Owner;
            
            private global::System.Data.DataColumn columnAMA_OwnerCode;
            
            private global::System.Data.DataColumn columnAMA_OpDate;
            
            private global::System.Data.DataColumn columnAMA_ReceiveDate;
            
            private global::System.Data.DataColumn columnAMA_OperatorCode;
            
            private global::System.Data.DataColumn columnAMA_Operator;
            
            private global::System.Data.DataColumn columnAMA_Content;
            
            private global::System.Data.DataColumn columnAMA_OStatus;
            
            private global::System.Data.DataColumn columnAMA_Stat;
            
            private global::System.Data.DataColumn columnAuditStat;
            
            private global::System.Data.DataColumn columnAMA_Remark;
            
            private global::System.Data.DataColumn columnAMA_ApplyType;
            
            private global::System.Data.DataColumn columnAMA_Type;
            
            private global::System.Data.DataColumn columnStat;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnUpdateDate;
            
            private global::System.Data.DataColumn columnDeleteDate;
            
            private global::System.Data.DataColumn columnAuditCurAudit;
            
            private global::System.Data.DataColumn columnAMA_name;
            
            private global::System.Data.DataColumn columnAMA_CompanyCode;
            
            private global::System.Data.DataColumn columnAMA_DeptCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Asset_MApplyDataTable() {
                this.TableName = "Asset_MApply";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Asset_MApplyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Asset_MApplyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_IDColumn {
                get {
                    return this.columnAMA_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_CodeColumn {
                get {
                    return this.columnAMA_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_FCodeColumn {
                get {
                    return this.columnAMA_FCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_FNameColumn {
                get {
                    return this.columnAMA_FName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_FSpecColumn {
                get {
                    return this.columnAMA_FSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_CompanyColumn {
                get {
                    return this.columnAMA_Company;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_DepartmentColumn {
                get {
                    return this.columnAMA_Department;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_ReasonColumn {
                get {
                    return this.columnAMA_Reason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_DescriptionColumn {
                get {
                    return this.columnAMA_Description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_DateColumn {
                get {
                    return this.columnAMA_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_TimeCostColumn {
                get {
                    return this.columnAMA_TimeCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_OwnerColumn {
                get {
                    return this.columnAMA_Owner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_OwnerCodeColumn {
                get {
                    return this.columnAMA_OwnerCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_OpDateColumn {
                get {
                    return this.columnAMA_OpDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_ReceiveDateColumn {
                get {
                    return this.columnAMA_ReceiveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_OperatorCodeColumn {
                get {
                    return this.columnAMA_OperatorCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_OperatorColumn {
                get {
                    return this.columnAMA_Operator;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_ContentColumn {
                get {
                    return this.columnAMA_Content;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_OStatusColumn {
                get {
                    return this.columnAMA_OStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_StatColumn {
                get {
                    return this.columnAMA_Stat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditStatColumn {
                get {
                    return this.columnAuditStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_RemarkColumn {
                get {
                    return this.columnAMA_Remark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_ApplyTypeColumn {
                get {
                    return this.columnAMA_ApplyType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_TypeColumn {
                get {
                    return this.columnAMA_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatColumn {
                get {
                    return this.columnStat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UpdateDateColumn {
                get {
                    return this.columnUpdateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeleteDateColumn {
                get {
                    return this.columnDeleteDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AuditCurAuditColumn {
                get {
                    return this.columnAuditCurAudit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_nameColumn {
                get {
                    return this.columnAMA_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_CompanyCodeColumn {
                get {
                    return this.columnAMA_CompanyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMA_DeptCodeColumn {
                get {
                    return this.columnAMA_DeptCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Asset_MApplyRow this[int index] {
                get {
                    return ((Asset_MApplyRow)(this.Rows[index]));
                }
            }
            
            public event Asset_MApplyRowChangeEventHandler Asset_MApplyRowChanging;
            
            public event Asset_MApplyRowChangeEventHandler Asset_MApplyRowChanged;
            
            public event Asset_MApplyRowChangeEventHandler Asset_MApplyRowDeleting;
            
            public event Asset_MApplyRowChangeEventHandler Asset_MApplyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAsset_MApplyRow(Asset_MApplyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Asset_MApplyRow AddAsset_MApplyRow(
                        string AMA_Code, 
                        string AMA_FCode, 
                        string AMA_FName, 
                        string AMA_FSpec, 
                        string AMA_Company, 
                        string AMA_Department, 
                        string AMA_Reason, 
                        string AMA_Description, 
                        System.DateTime AMA_Date, 
                        decimal AMA_TimeCost, 
                        string AMA_Owner, 
                        string AMA_OwnerCode, 
                        System.DateTime AMA_OpDate, 
                        System.DateTime AMA_ReceiveDate, 
                        string AMA_OperatorCode, 
                        string AMA_Operator, 
                        string AMA_Content, 
                        string AMA_OStatus, 
                        string AMA_Stat, 
                        string AuditStat, 
                        string AMA_Remark, 
                        string AMA_ApplyType, 
                        string AMA_Type, 
                        int Stat, 
                        System.DateTime CreateDate, 
                        System.DateTime UpdateDate, 
                        System.DateTime DeleteDate, 
                        string AuditCurAudit, 
                        string AMA_name, 
                        string AMA_CompanyCode, 
                        string AMA_DeptCode) {
                Asset_MApplyRow rowAsset_MApplyRow = ((Asset_MApplyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AMA_Code,
                        AMA_FCode,
                        AMA_FName,
                        AMA_FSpec,
                        AMA_Company,
                        AMA_Department,
                        AMA_Reason,
                        AMA_Description,
                        AMA_Date,
                        AMA_TimeCost,
                        AMA_Owner,
                        AMA_OwnerCode,
                        AMA_OpDate,
                        AMA_ReceiveDate,
                        AMA_OperatorCode,
                        AMA_Operator,
                        AMA_Content,
                        AMA_OStatus,
                        AMA_Stat,
                        AuditStat,
                        AMA_Remark,
                        AMA_ApplyType,
                        AMA_Type,
                        Stat,
                        CreateDate,
                        UpdateDate,
                        DeleteDate,
                        AuditCurAudit,
                        AMA_name,
                        AMA_CompanyCode,
                        AMA_DeptCode};
                rowAsset_MApplyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAsset_MApplyRow);
                return rowAsset_MApplyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Asset_MApplyRow FindByAMA_ID(decimal AMA_ID) {
                return ((Asset_MApplyRow)(this.Rows.Find(new object[] {
                            AMA_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Asset_MApplyDataTable cln = ((Asset_MApplyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Asset_MApplyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAMA_ID = base.Columns["AMA_ID"];
                this.columnAMA_Code = base.Columns["AMA_Code"];
                this.columnAMA_FCode = base.Columns["AMA_FCode"];
                this.columnAMA_FName = base.Columns["AMA_FName"];
                this.columnAMA_FSpec = base.Columns["AMA_FSpec"];
                this.columnAMA_Company = base.Columns["AMA_Company"];
                this.columnAMA_Department = base.Columns["AMA_Department"];
                this.columnAMA_Reason = base.Columns["AMA_Reason"];
                this.columnAMA_Description = base.Columns["AMA_Description"];
                this.columnAMA_Date = base.Columns["AMA_Date"];
                this.columnAMA_TimeCost = base.Columns["AMA_TimeCost"];
                this.columnAMA_Owner = base.Columns["AMA_Owner"];
                this.columnAMA_OwnerCode = base.Columns["AMA_OwnerCode"];
                this.columnAMA_OpDate = base.Columns["AMA_OpDate"];
                this.columnAMA_ReceiveDate = base.Columns["AMA_ReceiveDate"];
                this.columnAMA_OperatorCode = base.Columns["AMA_OperatorCode"];
                this.columnAMA_Operator = base.Columns["AMA_Operator"];
                this.columnAMA_Content = base.Columns["AMA_Content"];
                this.columnAMA_OStatus = base.Columns["AMA_OStatus"];
                this.columnAMA_Stat = base.Columns["AMA_Stat"];
                this.columnAuditStat = base.Columns["AuditStat"];
                this.columnAMA_Remark = base.Columns["AMA_Remark"];
                this.columnAMA_ApplyType = base.Columns["AMA_ApplyType"];
                this.columnAMA_Type = base.Columns["AMA_Type"];
                this.columnStat = base.Columns["Stat"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnUpdateDate = base.Columns["UpdateDate"];
                this.columnDeleteDate = base.Columns["DeleteDate"];
                this.columnAuditCurAudit = base.Columns["AuditCurAudit"];
                this.columnAMA_name = base.Columns["AMA_name"];
                this.columnAMA_CompanyCode = base.Columns["AMA_CompanyCode"];
                this.columnAMA_DeptCode = base.Columns["AMA_DeptCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAMA_ID = new global::System.Data.DataColumn("AMA_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_ID);
                this.columnAMA_Code = new global::System.Data.DataColumn("AMA_Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Code);
                this.columnAMA_FCode = new global::System.Data.DataColumn("AMA_FCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_FCode);
                this.columnAMA_FName = new global::System.Data.DataColumn("AMA_FName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_FName);
                this.columnAMA_FSpec = new global::System.Data.DataColumn("AMA_FSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_FSpec);
                this.columnAMA_Company = new global::System.Data.DataColumn("AMA_Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Company);
                this.columnAMA_Department = new global::System.Data.DataColumn("AMA_Department", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Department);
                this.columnAMA_Reason = new global::System.Data.DataColumn("AMA_Reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Reason);
                this.columnAMA_Description = new global::System.Data.DataColumn("AMA_Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Description);
                this.columnAMA_Date = new global::System.Data.DataColumn("AMA_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Date);
                this.columnAMA_TimeCost = new global::System.Data.DataColumn("AMA_TimeCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_TimeCost);
                this.columnAMA_Owner = new global::System.Data.DataColumn("AMA_Owner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Owner);
                this.columnAMA_OwnerCode = new global::System.Data.DataColumn("AMA_OwnerCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_OwnerCode);
                this.columnAMA_OpDate = new global::System.Data.DataColumn("AMA_OpDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_OpDate);
                this.columnAMA_ReceiveDate = new global::System.Data.DataColumn("AMA_ReceiveDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_ReceiveDate);
                this.columnAMA_OperatorCode = new global::System.Data.DataColumn("AMA_OperatorCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_OperatorCode);
                this.columnAMA_Operator = new global::System.Data.DataColumn("AMA_Operator", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Operator);
                this.columnAMA_Content = new global::System.Data.DataColumn("AMA_Content", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Content);
                this.columnAMA_OStatus = new global::System.Data.DataColumn("AMA_OStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_OStatus);
                this.columnAMA_Stat = new global::System.Data.DataColumn("AMA_Stat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Stat);
                this.columnAuditStat = new global::System.Data.DataColumn("AuditStat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditStat);
                this.columnAMA_Remark = new global::System.Data.DataColumn("AMA_Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Remark);
                this.columnAMA_ApplyType = new global::System.Data.DataColumn("AMA_ApplyType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_ApplyType);
                this.columnAMA_Type = new global::System.Data.DataColumn("AMA_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_Type);
                this.columnStat = new global::System.Data.DataColumn("Stat", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStat);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnUpdateDate = new global::System.Data.DataColumn("UpdateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUpdateDate);
                this.columnDeleteDate = new global::System.Data.DataColumn("DeleteDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeleteDate);
                this.columnAuditCurAudit = new global::System.Data.DataColumn("AuditCurAudit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAuditCurAudit);
                this.columnAMA_name = new global::System.Data.DataColumn("AMA_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_name);
                this.columnAMA_CompanyCode = new global::System.Data.DataColumn("AMA_CompanyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_CompanyCode);
                this.columnAMA_DeptCode = new global::System.Data.DataColumn("AMA_DeptCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMA_DeptCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAMA_ID}, true));
                this.columnAMA_ID.AutoIncrement = true;
                this.columnAMA_ID.AutoIncrementSeed = -1;
                this.columnAMA_ID.AutoIncrementStep = -1;
                this.columnAMA_ID.AllowDBNull = false;
                this.columnAMA_ID.ReadOnly = true;
                this.columnAMA_ID.Unique = true;
                this.columnAMA_Code.MaxLength = 20;
                this.columnAMA_FCode.MaxLength = 20;
                this.columnAMA_FName.MaxLength = 20;
                this.columnAMA_FSpec.MaxLength = 20;
                this.columnAMA_Company.MaxLength = 20;
                this.columnAMA_Department.MaxLength = 20;
                this.columnAMA_Reason.MaxLength = 500;
                this.columnAMA_Description.MaxLength = 500;
                this.columnAMA_Owner.MaxLength = 20;
                this.columnAMA_OwnerCode.MaxLength = 20;
                this.columnAMA_OperatorCode.MaxLength = 20;
                this.columnAMA_Operator.MaxLength = 20;
                this.columnAMA_Content.MaxLength = 500;
                this.columnAMA_OStatus.MaxLength = 20;
                this.columnAMA_Stat.MaxLength = 20;
                this.columnAuditStat.MaxLength = 20;
                this.columnAMA_Remark.MaxLength = 500;
                this.columnAMA_ApplyType.MaxLength = 20;
                this.columnAMA_Type.MaxLength = 20;
                this.columnAuditCurAudit.MaxLength = 50;
                this.columnAMA_name.MaxLength = 50;
                this.columnAMA_CompanyCode.MaxLength = 50;
                this.columnAMA_DeptCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Asset_MApplyRow NewAsset_MApplyRow() {
                return ((Asset_MApplyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Asset_MApplyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Asset_MApplyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Asset_MApplyRowChanged != null)) {
                    this.Asset_MApplyRowChanged(this, new Asset_MApplyRowChangeEvent(((Asset_MApplyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Asset_MApplyRowChanging != null)) {
                    this.Asset_MApplyRowChanging(this, new Asset_MApplyRowChangeEvent(((Asset_MApplyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Asset_MApplyRowDeleted != null)) {
                    this.Asset_MApplyRowDeleted(this, new Asset_MApplyRowChangeEvent(((Asset_MApplyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Asset_MApplyRowDeleting != null)) {
                    this.Asset_MApplyRowDeleting(this, new Asset_MApplyRowChangeEvent(((Asset_MApplyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAsset_MApplyRow(Asset_MApplyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EquipmentRepairDB ds = new EquipmentRepairDB();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Asset_MApplyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Asset_MApplyRow : global::System.Data.DataRow {
            
            private Asset_MApplyDataTable tableAsset_MApply;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Asset_MApplyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAsset_MApply = ((Asset_MApplyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AMA_ID {
                get {
                    return ((decimal)(this[this.tableAsset_MApply.AMA_IDColumn]));
                }
                set {
                    this[this.tableAsset_MApply.AMA_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Code {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_FCode {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_FCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_FCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_FCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_FName {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_FNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_FName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_FNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_FSpec {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_FSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_FSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_FSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Company {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_CompanyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Company”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Department {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_DepartmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Department”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_DepartmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Reason {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_ReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Reason”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_ReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Description {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Description”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AMA_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAsset_MApply.AMA_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Date”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AMA_TimeCost {
                get {
                    try {
                        return ((decimal)(this[this.tableAsset_MApply.AMA_TimeCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_TimeCost”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_TimeCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Owner {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_OwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Owner”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_OwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_OwnerCode {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_OwnerCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_OwnerCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_OwnerCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AMA_OpDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAsset_MApply.AMA_OpDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_OpDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_OpDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AMA_ReceiveDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAsset_MApply.AMA_ReceiveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_ReceiveDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_ReceiveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_OperatorCode {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_OperatorCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_OperatorCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_OperatorCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Operator {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_OperatorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Operator”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_OperatorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Content {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_ContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Content”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_ContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_OStatus {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_OStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_OStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_OStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Stat {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_StatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Stat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_StatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditStat {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AuditStatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AuditStat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AuditStatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Remark {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Remark”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_ApplyType {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_ApplyTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_ApplyType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_ApplyTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_Type {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_Type”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Stat {
                get {
                    try {
                        return ((int)(this[this.tableAsset_MApply.StatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“Stat”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.StatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAsset_MApply.CreateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“CreateDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UpdateDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAsset_MApply.UpdateDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“UpdateDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.UpdateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DeleteDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAsset_MApply.DeleteDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“DeleteDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.DeleteDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AuditCurAudit {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AuditCurAuditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AuditCurAudit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AuditCurAuditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_name {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_CompanyCode {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_CompanyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_CompanyCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_CompanyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMA_DeptCode {
                get {
                    try {
                        return ((string)(this[this.tableAsset_MApply.AMA_DeptCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Asset_MApply”中列“AMA_DeptCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableAsset_MApply.AMA_DeptCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_CodeNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_CodeNull() {
                this[this.tableAsset_MApply.AMA_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_FCodeNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_FCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_FCodeNull() {
                this[this.tableAsset_MApply.AMA_FCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_FNameNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_FNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_FNameNull() {
                this[this.tableAsset_MApply.AMA_FNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_FSpecNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_FSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_FSpecNull() {
                this[this.tableAsset_MApply.AMA_FSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_CompanyNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_CompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_CompanyNull() {
                this[this.tableAsset_MApply.AMA_CompanyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_DepartmentNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_DepartmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_DepartmentNull() {
                this[this.tableAsset_MApply.AMA_DepartmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_ReasonNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_ReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_ReasonNull() {
                this[this.tableAsset_MApply.AMA_ReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_DescriptionNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_DescriptionNull() {
                this[this.tableAsset_MApply.AMA_DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_DateNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_DateNull() {
                this[this.tableAsset_MApply.AMA_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_TimeCostNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_TimeCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_TimeCostNull() {
                this[this.tableAsset_MApply.AMA_TimeCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_OwnerNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_OwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_OwnerNull() {
                this[this.tableAsset_MApply.AMA_OwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_OwnerCodeNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_OwnerCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_OwnerCodeNull() {
                this[this.tableAsset_MApply.AMA_OwnerCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_OpDateNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_OpDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_OpDateNull() {
                this[this.tableAsset_MApply.AMA_OpDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_ReceiveDateNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_ReceiveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_ReceiveDateNull() {
                this[this.tableAsset_MApply.AMA_ReceiveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_OperatorCodeNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_OperatorCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_OperatorCodeNull() {
                this[this.tableAsset_MApply.AMA_OperatorCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_OperatorNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_OperatorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_OperatorNull() {
                this[this.tableAsset_MApply.AMA_OperatorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_ContentNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_ContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_ContentNull() {
                this[this.tableAsset_MApply.AMA_ContentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_OStatusNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_OStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_OStatusNull() {
                this[this.tableAsset_MApply.AMA_OStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_StatNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_StatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_StatNull() {
                this[this.tableAsset_MApply.AMA_StatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditStatNull() {
                return this.IsNull(this.tableAsset_MApply.AuditStatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditStatNull() {
                this[this.tableAsset_MApply.AuditStatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_RemarkNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_RemarkNull() {
                this[this.tableAsset_MApply.AMA_RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_ApplyTypeNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_ApplyTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_ApplyTypeNull() {
                this[this.tableAsset_MApply.AMA_ApplyTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_TypeNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_TypeNull() {
                this[this.tableAsset_MApply.AMA_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatNull() {
                return this.IsNull(this.tableAsset_MApply.StatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatNull() {
                this[this.tableAsset_MApply.StatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreateDateNull() {
                return this.IsNull(this.tableAsset_MApply.CreateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreateDateNull() {
                this[this.tableAsset_MApply.CreateDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUpdateDateNull() {
                return this.IsNull(this.tableAsset_MApply.UpdateDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUpdateDateNull() {
                this[this.tableAsset_MApply.UpdateDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleteDateNull() {
                return this.IsNull(this.tableAsset_MApply.DeleteDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeleteDateNull() {
                this[this.tableAsset_MApply.DeleteDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAuditCurAuditNull() {
                return this.IsNull(this.tableAsset_MApply.AuditCurAuditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAuditCurAuditNull() {
                this[this.tableAsset_MApply.AuditCurAuditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_nameNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_nameNull() {
                this[this.tableAsset_MApply.AMA_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_CompanyCodeNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_CompanyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_CompanyCodeNull() {
                this[this.tableAsset_MApply.AMA_CompanyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMA_DeptCodeNull() {
                return this.IsNull(this.tableAsset_MApply.AMA_DeptCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMA_DeptCodeNull() {
                this[this.tableAsset_MApply.AMA_DeptCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Asset_MApplyRowChangeEvent : global::System.EventArgs {
            
            private Asset_MApplyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Asset_MApplyRowChangeEvent(Asset_MApplyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Asset_MApplyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QX.UI.Data.EquipmentRepairDBTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Asset_MApplyTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Asset_MApplyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Asset_MApply";
            tableMapping.ColumnMappings.Add("AMA_ID", "AMA_ID");
            tableMapping.ColumnMappings.Add("AMA_Code", "AMA_Code");
            tableMapping.ColumnMappings.Add("AMA_FCode", "AMA_FCode");
            tableMapping.ColumnMappings.Add("AMA_FName", "AMA_FName");
            tableMapping.ColumnMappings.Add("AMA_FSpec", "AMA_FSpec");
            tableMapping.ColumnMappings.Add("AMA_Company", "AMA_Company");
            tableMapping.ColumnMappings.Add("AMA_Department", "AMA_Department");
            tableMapping.ColumnMappings.Add("AMA_Reason", "AMA_Reason");
            tableMapping.ColumnMappings.Add("AMA_Description", "AMA_Description");
            tableMapping.ColumnMappings.Add("AMA_Date", "AMA_Date");
            tableMapping.ColumnMappings.Add("AMA_TimeCost", "AMA_TimeCost");
            tableMapping.ColumnMappings.Add("AMA_Owner", "AMA_Owner");
            tableMapping.ColumnMappings.Add("AMA_OwnerCode", "AMA_OwnerCode");
            tableMapping.ColumnMappings.Add("AMA_OpDate", "AMA_OpDate");
            tableMapping.ColumnMappings.Add("AMA_ReceiveDate", "AMA_ReceiveDate");
            tableMapping.ColumnMappings.Add("AMA_OperatorCode", "AMA_OperatorCode");
            tableMapping.ColumnMappings.Add("AMA_Operator", "AMA_Operator");
            tableMapping.ColumnMappings.Add("AMA_Content", "AMA_Content");
            tableMapping.ColumnMappings.Add("AMA_OStatus", "AMA_OStatus");
            tableMapping.ColumnMappings.Add("AMA_Stat", "AMA_Stat");
            tableMapping.ColumnMappings.Add("AuditStat", "AuditStat");
            tableMapping.ColumnMappings.Add("AMA_Remark", "AMA_Remark");
            tableMapping.ColumnMappings.Add("AMA_ApplyType", "AMA_ApplyType");
            tableMapping.ColumnMappings.Add("AMA_Type", "AMA_Type");
            tableMapping.ColumnMappings.Add("Stat", "Stat");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            tableMapping.ColumnMappings.Add("UpdateDate", "UpdateDate");
            tableMapping.ColumnMappings.Add("DeleteDate", "DeleteDate");
            tableMapping.ColumnMappings.Add("AuditCurAudit", "AuditCurAudit");
            tableMapping.ColumnMappings.Add("AMA_name", "AMA_name");
            tableMapping.ColumnMappings.Add("AMA_CompanyCode", "AMA_CompanyCode");
            tableMapping.ColumnMappings.Add("AMA_DeptCode", "AMA_DeptCode");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Asset_MApply] WHERE (([AMA_ID] = @Original_AMA_ID))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AMA_ID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AMA_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Asset_MApply] ([AMA_Code], [AMA_FCode], [AMA_FName], [AMA_FSpec], [AMA_Company], [AMA_Department], [AMA_Reason], [AMA_Description], [AMA_Date], [AMA_TimeCost], [AMA_Owner], [AMA_OwnerCode], [AMA_OpDate], [AMA_ReceiveDate], [AMA_OperatorCode], [AMA_Operator], [AMA_Content], [AMA_OStatus], [AMA_Stat], [AuditStat], [AMA_Remark], [AMA_ApplyType], [AMA_Type], [Stat], [CreateDate], [UpdateDate], [DeleteDate], [AuditCurAudit], [AMA_name], [AMA_CompanyCode], [AMA_DeptCode]) VALUES (@AMA_Code, @AMA_FCode, @AMA_FName, @AMA_FSpec, @AMA_Company, @AMA_Department, @AMA_Reason, @AMA_Description, @AMA_Date, @AMA_TimeCost, @AMA_Owner, @AMA_OwnerCode, @AMA_OpDate, @AMA_ReceiveDate, @AMA_OperatorCode, @AMA_Operator, @AMA_Content, @AMA_OStatus, @AMA_Stat, @AuditStat, @AMA_Remark, @AMA_ApplyType, @AMA_Type, @Stat, @CreateDate, @UpdateDate, @DeleteDate, @AuditCurAudit, @AMA_name, @AMA_CompanyCode, @AMA_DeptCode)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_FCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_FCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_FName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_FName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_FSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_FSpec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Company", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Company", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Department", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Department", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Reason", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Reason", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_TimeCost", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "AMA_TimeCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Owner", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Owner", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_OwnerCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_OwnerCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_OpDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_OpDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_ReceiveDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_ReceiveDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_OperatorCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_OperatorCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Operator", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Operator", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Content", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Content", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_OStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_OStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Stat", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Stat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuditStat", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuditStat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_ApplyType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_ApplyType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeleteDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DeleteDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuditCurAudit", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuditCurAudit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_CompanyCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_CompanyCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_DeptCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_DeptCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Asset_MApply] SET [AMA_Code] = @AMA_Code, [AMA_FCode] = @AMA_FCode, [AMA_FName] = @AMA_FName, [AMA_FSpec] = @AMA_FSpec, [AMA_Company] = @AMA_Company, [AMA_Department] = @AMA_Department, [AMA_Reason] = @AMA_Reason, [AMA_Description] = @AMA_Description, [AMA_Date] = @AMA_Date, [AMA_TimeCost] = @AMA_TimeCost, [AMA_Owner] = @AMA_Owner, [AMA_OwnerCode] = @AMA_OwnerCode, [AMA_OpDate] = @AMA_OpDate, [AMA_ReceiveDate] = @AMA_ReceiveDate, [AMA_OperatorCode] = @AMA_OperatorCode, [AMA_Operator] = @AMA_Operator, [AMA_Content] = @AMA_Content, [AMA_OStatus] = @AMA_OStatus, [AMA_Stat] = @AMA_Stat, [AuditStat] = @AuditStat, [AMA_Remark] = @AMA_Remark, [AMA_ApplyType] = @AMA_ApplyType, [AMA_Type] = @AMA_Type, [Stat] = @Stat, [CreateDate] = @CreateDate, [UpdateDate] = @UpdateDate, [DeleteDate] = @DeleteDate, [AuditCurAudit] = @AuditCurAudit, [AMA_name] = @AMA_name, [AMA_CompanyCode] = @AMA_CompanyCode, [AMA_DeptCode] = @AMA_DeptCode WHERE (([AMA_ID] = @Original_AMA_ID))";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Code", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Code", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_FCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_FCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_FName", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_FName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_FSpec", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_FSpec", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Company", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Company", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Department", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Department", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Reason", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Reason", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Description", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Date", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_TimeCost", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 2, "AMA_TimeCost", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Owner", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Owner", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_OwnerCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_OwnerCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_OpDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_OpDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_ReceiveDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_ReceiveDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_OperatorCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_OperatorCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Operator", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Operator", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Content", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Content", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_OStatus", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_OStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Stat", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Stat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuditStat", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuditStat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Remark", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Remark", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_ApplyType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_ApplyType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_Type", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Stat", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Stat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@UpdateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "UpdateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DeleteDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DeleteDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AuditCurAudit", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AuditCurAudit", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_name", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_CompanyCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_CompanyCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AMA_DeptCode", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AMA_DeptCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AMA_ID", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 18, 0, "AMA_ID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["LAFA20101112ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT AMA_ID, AMA_Code, AMA_FCode, AMA_FName, AMA_FSpec, AMA_Company, AMA_Department, AMA_Reason, AMA_Description, AMA_Date, AMA_TimeCost, AMA_Owner, AMA_OwnerCode, AMA_OpDate, AMA_ReceiveDate, AMA_OperatorCode, AMA_Operator, AMA_Content, AMA_OStatus, AMA_Stat, AuditStat, AMA_Remark, AMA_ApplyType, AMA_Type, Stat, CreateDate, UpdateDate, DeleteDate, AuditCurAudit, AMA_name, AMA_CompanyCode, AMA_DeptCode FROM dbo.Asset_MApply";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(EquipmentRepairDB.Asset_MApplyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual EquipmentRepairDB.Asset_MApplyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            EquipmentRepairDB.Asset_MApplyDataTable dataTable = new EquipmentRepairDB.Asset_MApplyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EquipmentRepairDB.Asset_MApplyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(EquipmentRepairDB dataSet) {
            return this.Adapter.Update(dataSet, "Asset_MApply");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(decimal Original_AMA_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_AMA_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string AMA_Code, 
                    string AMA_FCode, 
                    string AMA_FName, 
                    string AMA_FSpec, 
                    string AMA_Company, 
                    string AMA_Department, 
                    string AMA_Reason, 
                    string AMA_Description, 
                    global::System.Nullable<global::System.DateTime> AMA_Date, 
                    global::System.Nullable<decimal> AMA_TimeCost, 
                    string AMA_Owner, 
                    string AMA_OwnerCode, 
                    global::System.Nullable<global::System.DateTime> AMA_OpDate, 
                    global::System.Nullable<global::System.DateTime> AMA_ReceiveDate, 
                    string AMA_OperatorCode, 
                    string AMA_Operator, 
                    string AMA_Content, 
                    string AMA_OStatus, 
                    string AMA_Stat, 
                    string AuditStat, 
                    string AMA_Remark, 
                    string AMA_ApplyType, 
                    string AMA_Type, 
                    global::System.Nullable<int> Stat, 
                    global::System.Nullable<global::System.DateTime> CreateDate, 
                    global::System.Nullable<global::System.DateTime> UpdateDate, 
                    global::System.Nullable<global::System.DateTime> DeleteDate, 
                    string AuditCurAudit, 
                    string AMA_name, 
                    string AMA_CompanyCode, 
                    string AMA_DeptCode) {
            if ((AMA_Code == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(AMA_Code));
            }
            if ((AMA_FCode == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(AMA_FCode));
            }
            if ((AMA_FName == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(AMA_FName));
            }
            if ((AMA_FSpec == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(AMA_FSpec));
            }
            if ((AMA_Company == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(AMA_Company));
            }
            if ((AMA_Department == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(AMA_Department));
            }
            if ((AMA_Reason == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(AMA_Reason));
            }
            if ((AMA_Description == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(AMA_Description));
            }
            if ((AMA_Date.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((System.DateTime)(AMA_Date.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((AMA_TimeCost.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((decimal)(AMA_TimeCost.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((AMA_Owner == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(AMA_Owner));
            }
            if ((AMA_OwnerCode == null)) {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(AMA_OwnerCode));
            }
            if ((AMA_OpDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(AMA_OpDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((AMA_ReceiveDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(AMA_ReceiveDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((AMA_OperatorCode == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(AMA_OperatorCode));
            }
            if ((AMA_Operator == null)) {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = ((string)(AMA_Operator));
            }
            if ((AMA_Content == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(AMA_Content));
            }
            if ((AMA_OStatus == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(AMA_OStatus));
            }
            if ((AMA_Stat == null)) {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = ((string)(AMA_Stat));
            }
            if ((AuditStat == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(AuditStat));
            }
            if ((AMA_Remark == null)) {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = ((string)(AMA_Remark));
            }
            if ((AMA_ApplyType == null)) {
                this.Adapter.InsertCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[21].Value = ((string)(AMA_ApplyType));
            }
            if ((AMA_Type == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(AMA_Type));
            }
            if ((Stat.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[23].Value = ((int)(Stat.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((CreateDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((System.DateTime)(CreateDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((UpdateDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((System.DateTime)(UpdateDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((DeleteDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[26].Value = ((System.DateTime)(DeleteDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((AuditCurAudit == null)) {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = ((string)(AuditCurAudit));
            }
            if ((AMA_name == null)) {
                this.Adapter.InsertCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[28].Value = ((string)(AMA_name));
            }
            if ((AMA_CompanyCode == null)) {
                this.Adapter.InsertCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[29].Value = ((string)(AMA_CompanyCode));
            }
            if ((AMA_DeptCode == null)) {
                this.Adapter.InsertCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[30].Value = ((string)(AMA_DeptCode));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string AMA_Code, 
                    string AMA_FCode, 
                    string AMA_FName, 
                    string AMA_FSpec, 
                    string AMA_Company, 
                    string AMA_Department, 
                    string AMA_Reason, 
                    string AMA_Description, 
                    global::System.Nullable<global::System.DateTime> AMA_Date, 
                    global::System.Nullable<decimal> AMA_TimeCost, 
                    string AMA_Owner, 
                    string AMA_OwnerCode, 
                    global::System.Nullable<global::System.DateTime> AMA_OpDate, 
                    global::System.Nullable<global::System.DateTime> AMA_ReceiveDate, 
                    string AMA_OperatorCode, 
                    string AMA_Operator, 
                    string AMA_Content, 
                    string AMA_OStatus, 
                    string AMA_Stat, 
                    string AuditStat, 
                    string AMA_Remark, 
                    string AMA_ApplyType, 
                    string AMA_Type, 
                    global::System.Nullable<int> Stat, 
                    global::System.Nullable<global::System.DateTime> CreateDate, 
                    global::System.Nullable<global::System.DateTime> UpdateDate, 
                    global::System.Nullable<global::System.DateTime> DeleteDate, 
                    string AuditCurAudit, 
                    string AMA_name, 
                    string AMA_CompanyCode, 
                    string AMA_DeptCode, 
                    decimal Original_AMA_ID) {
            if ((AMA_Code == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(AMA_Code));
            }
            if ((AMA_FCode == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(AMA_FCode));
            }
            if ((AMA_FName == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(AMA_FName));
            }
            if ((AMA_FSpec == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(AMA_FSpec));
            }
            if ((AMA_Company == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(AMA_Company));
            }
            if ((AMA_Department == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(AMA_Department));
            }
            if ((AMA_Reason == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(AMA_Reason));
            }
            if ((AMA_Description == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(AMA_Description));
            }
            if ((AMA_Date.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((System.DateTime)(AMA_Date.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((AMA_TimeCost.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((decimal)(AMA_TimeCost.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((AMA_Owner == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(AMA_Owner));
            }
            if ((AMA_OwnerCode == null)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(AMA_OwnerCode));
            }
            if ((AMA_OpDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(AMA_OpDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((AMA_ReceiveDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(AMA_ReceiveDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((AMA_OperatorCode == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(AMA_OperatorCode));
            }
            if ((AMA_Operator == null)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(AMA_Operator));
            }
            if ((AMA_Content == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(AMA_Content));
            }
            if ((AMA_OStatus == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(AMA_OStatus));
            }
            if ((AMA_Stat == null)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(AMA_Stat));
            }
            if ((AuditStat == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(AuditStat));
            }
            if ((AMA_Remark == null)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(AMA_Remark));
            }
            if ((AMA_ApplyType == null)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(AMA_ApplyType));
            }
            if ((AMA_Type == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(AMA_Type));
            }
            if ((Stat.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Stat.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((CreateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((System.DateTime)(CreateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((UpdateDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((System.DateTime)(UpdateDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((DeleteDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(DeleteDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((AuditCurAudit == null)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(AuditCurAudit));
            }
            if ((AMA_name == null)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(AMA_name));
            }
            if ((AMA_CompanyCode == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(AMA_CompanyCode));
            }
            if ((AMA_DeptCode == null)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(AMA_DeptCode));
            }
            this.Adapter.UpdateCommand.Parameters[31].Value = ((decimal)(Original_AMA_ID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Asset_MApplyTableAdapter _asset_MApplyTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public Asset_MApplyTableAdapter Asset_MApplyTableAdapter {
            get {
                return this._asset_MApplyTableAdapter;
            }
            set {
                this._asset_MApplyTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._asset_MApplyTableAdapter != null) 
                            && (this._asset_MApplyTableAdapter.Connection != null))) {
                    return this._asset_MApplyTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._asset_MApplyTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(EquipmentRepairDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._asset_MApplyTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Asset_MApply.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._asset_MApplyTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(EquipmentRepairDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._asset_MApplyTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Asset_MApply.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._asset_MApplyTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(EquipmentRepairDB dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._asset_MApplyTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Asset_MApply.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._asset_MApplyTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(EquipmentRepairDB dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._asset_MApplyTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._asset_MApplyTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("由 TableAdapterManager 管理的所有 TableAdapter 必须使用相同的连接字符串。");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._asset_MApplyTableAdapter != null)) {
                    revertConnections.Add(this._asset_MApplyTableAdapter, this._asset_MApplyTableAdapter.Connection);
                    this._asset_MApplyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._asset_MApplyTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._asset_MApplyTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._asset_MApplyTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._asset_MApplyTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._asset_MApplyTableAdapter != null)) {
                    this._asset_MApplyTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._asset_MApplyTableAdapter]));
                    this._asset_MApplyTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591