//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4952
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace QX.UI.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StockCheckNew")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StockCheckNew : global::System.Data.DataSet {
        
        private VRpt_StockCheckNewDataTable tableVRpt_StockCheckNew;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StockCheckNew() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StockCheckNew(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["VRpt_StockCheckNew"] != null)) {
                    base.Tables.Add(new VRpt_StockCheckNewDataTable(ds.Tables["VRpt_StockCheckNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VRpt_StockCheckNewDataTable VRpt_StockCheckNew {
            get {
                return this.tableVRpt_StockCheckNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StockCheckNew cln = ((StockCheckNew)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["VRpt_StockCheckNew"] != null)) {
                    base.Tables.Add(new VRpt_StockCheckNewDataTable(ds.Tables["VRpt_StockCheckNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableVRpt_StockCheckNew = ((VRpt_StockCheckNewDataTable)(base.Tables["VRpt_StockCheckNew"]));
            if ((initTable == true)) {
                if ((this.tableVRpt_StockCheckNew != null)) {
                    this.tableVRpt_StockCheckNew.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StockCheckNew";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StockCheckNew.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableVRpt_StockCheckNew = new VRpt_StockCheckNewDataTable();
            base.Tables.Add(this.tableVRpt_StockCheckNew);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVRpt_StockCheckNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StockCheckNew ds = new StockCheckNew();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void VRpt_StockCheckNewRowChangeEventHandler(object sender, VRpt_StockCheckNewRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VRpt_StockCheckNewDataTable : global::System.Data.TypedTableBase<VRpt_StockCheckNewRow> {
            
            private global::System.Data.DataColumn columnWHBI_Code;
            
            private global::System.Data.DataColumn columnWHBI_BCode;
            
            private global::System.Data.DataColumn columnWHBI_WCode;
            
            private global::System.Data.DataColumn columnWHBI_WName;
            
            private global::System.Data.DataColumn columnWHBI_WNo;
            
            private global::System.Data.DataColumn columnWHBI_WNoName;
            
            private global::System.Data.DataColumn columnWHBI_MCode;
            
            private global::System.Data.DataColumn columnWHBI_MName;
            
            private global::System.Data.DataColumn columnWHBI_MSpec;
            
            private global::System.Data.DataColumn columnWHBI_MUnit;
            
            private global::System.Data.DataColumn columnWHBI_RNum;
            
            private global::System.Data.DataColumn columnWHBI_BNum;
            
            private global::System.Data.DataColumn columnWHBI_MNum;
            
            private global::System.Data.DataColumn columnWHBI_LNum;
            
            private global::System.Data.DataColumn columnWHBI_Type;
            
            private global::System.Data.DataColumn columnWHBI_RType;
            
            private global::System.Data.DataColumn columnWHBI_Date;
            
            private global::System.Data.DataColumn columnWHBI_Owner;
            
            private global::System.Data.DataColumn columnWHBI_Bak;
            
            private global::System.Data.DataColumn columnWHBM_WName;
            
            private global::System.Data.DataColumn columnWHBM_WCode;
            
            private global::System.Data.DataColumn columnWHBM_Company;
            
            private global::System.Data.DataColumn columnWHBM_CompanyCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_StockCheckNewDataTable() {
                this.TableName = "VRpt_StockCheckNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VRpt_StockCheckNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VRpt_StockCheckNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_CodeColumn {
                get {
                    return this.columnWHBI_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_BCodeColumn {
                get {
                    return this.columnWHBI_BCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_WCodeColumn {
                get {
                    return this.columnWHBI_WCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_WNameColumn {
                get {
                    return this.columnWHBI_WName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_WNoColumn {
                get {
                    return this.columnWHBI_WNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_WNoNameColumn {
                get {
                    return this.columnWHBI_WNoName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_MCodeColumn {
                get {
                    return this.columnWHBI_MCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_MNameColumn {
                get {
                    return this.columnWHBI_MName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_MSpecColumn {
                get {
                    return this.columnWHBI_MSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_MUnitColumn {
                get {
                    return this.columnWHBI_MUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_RNumColumn {
                get {
                    return this.columnWHBI_RNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_BNumColumn {
                get {
                    return this.columnWHBI_BNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_MNumColumn {
                get {
                    return this.columnWHBI_MNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_LNumColumn {
                get {
                    return this.columnWHBI_LNum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_TypeColumn {
                get {
                    return this.columnWHBI_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_RTypeColumn {
                get {
                    return this.columnWHBI_RType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_DateColumn {
                get {
                    return this.columnWHBI_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_OwnerColumn {
                get {
                    return this.columnWHBI_Owner;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBI_BakColumn {
                get {
                    return this.columnWHBI_Bak;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBM_WNameColumn {
                get {
                    return this.columnWHBM_WName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBM_WCodeColumn {
                get {
                    return this.columnWHBM_WCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBM_CompanyColumn {
                get {
                    return this.columnWHBM_Company;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WHBM_CompanyCodeColumn {
                get {
                    return this.columnWHBM_CompanyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_StockCheckNewRow this[int index] {
                get {
                    return ((VRpt_StockCheckNewRow)(this.Rows[index]));
                }
            }
            
            public event VRpt_StockCheckNewRowChangeEventHandler VRpt_StockCheckNewRowChanging;
            
            public event VRpt_StockCheckNewRowChangeEventHandler VRpt_StockCheckNewRowChanged;
            
            public event VRpt_StockCheckNewRowChangeEventHandler VRpt_StockCheckNewRowDeleting;
            
            public event VRpt_StockCheckNewRowChangeEventHandler VRpt_StockCheckNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVRpt_StockCheckNewRow(VRpt_StockCheckNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_StockCheckNewRow AddVRpt_StockCheckNewRow(
                        string WHBI_Code, 
                        string WHBI_BCode, 
                        string WHBI_WCode, 
                        string WHBI_WName, 
                        string WHBI_WNo, 
                        string WHBI_WNoName, 
                        string WHBI_MCode, 
                        string WHBI_MName, 
                        string WHBI_MSpec, 
                        string WHBI_MUnit, 
                        decimal WHBI_RNum, 
                        decimal WHBI_BNum, 
                        decimal WHBI_MNum, 
                        decimal WHBI_LNum, 
                        string WHBI_Type, 
                        string WHBI_RType, 
                        System.DateTime WHBI_Date, 
                        string WHBI_Owner, 
                        string WHBI_Bak, 
                        string WHBM_WName, 
                        string WHBM_WCode, 
                        string WHBM_Company, 
                        string WHBM_CompanyCode) {
                VRpt_StockCheckNewRow rowVRpt_StockCheckNewRow = ((VRpt_StockCheckNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        WHBI_Code,
                        WHBI_BCode,
                        WHBI_WCode,
                        WHBI_WName,
                        WHBI_WNo,
                        WHBI_WNoName,
                        WHBI_MCode,
                        WHBI_MName,
                        WHBI_MSpec,
                        WHBI_MUnit,
                        WHBI_RNum,
                        WHBI_BNum,
                        WHBI_MNum,
                        WHBI_LNum,
                        WHBI_Type,
                        WHBI_RType,
                        WHBI_Date,
                        WHBI_Owner,
                        WHBI_Bak,
                        WHBM_WName,
                        WHBM_WCode,
                        WHBM_Company,
                        WHBM_CompanyCode};
                rowVRpt_StockCheckNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVRpt_StockCheckNewRow);
                return rowVRpt_StockCheckNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VRpt_StockCheckNewDataTable cln = ((VRpt_StockCheckNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VRpt_StockCheckNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnWHBI_Code = base.Columns["WHBI_Code"];
                this.columnWHBI_BCode = base.Columns["WHBI_BCode"];
                this.columnWHBI_WCode = base.Columns["WHBI_WCode"];
                this.columnWHBI_WName = base.Columns["WHBI_WName"];
                this.columnWHBI_WNo = base.Columns["WHBI_WNo"];
                this.columnWHBI_WNoName = base.Columns["WHBI_WNoName"];
                this.columnWHBI_MCode = base.Columns["WHBI_MCode"];
                this.columnWHBI_MName = base.Columns["WHBI_MName"];
                this.columnWHBI_MSpec = base.Columns["WHBI_MSpec"];
                this.columnWHBI_MUnit = base.Columns["WHBI_MUnit"];
                this.columnWHBI_RNum = base.Columns["WHBI_RNum"];
                this.columnWHBI_BNum = base.Columns["WHBI_BNum"];
                this.columnWHBI_MNum = base.Columns["WHBI_MNum"];
                this.columnWHBI_LNum = base.Columns["WHBI_LNum"];
                this.columnWHBI_Type = base.Columns["WHBI_Type"];
                this.columnWHBI_RType = base.Columns["WHBI_RType"];
                this.columnWHBI_Date = base.Columns["WHBI_Date"];
                this.columnWHBI_Owner = base.Columns["WHBI_Owner"];
                this.columnWHBI_Bak = base.Columns["WHBI_Bak"];
                this.columnWHBM_WName = base.Columns["WHBM_WName"];
                this.columnWHBM_WCode = base.Columns["WHBM_WCode"];
                this.columnWHBM_Company = base.Columns["WHBM_Company"];
                this.columnWHBM_CompanyCode = base.Columns["WHBM_CompanyCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnWHBI_Code = new global::System.Data.DataColumn("WHBI_Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_Code);
                this.columnWHBI_BCode = new global::System.Data.DataColumn("WHBI_BCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_BCode);
                this.columnWHBI_WCode = new global::System.Data.DataColumn("WHBI_WCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_WCode);
                this.columnWHBI_WName = new global::System.Data.DataColumn("WHBI_WName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_WName);
                this.columnWHBI_WNo = new global::System.Data.DataColumn("WHBI_WNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_WNo);
                this.columnWHBI_WNoName = new global::System.Data.DataColumn("WHBI_WNoName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_WNoName);
                this.columnWHBI_MCode = new global::System.Data.DataColumn("WHBI_MCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_MCode);
                this.columnWHBI_MName = new global::System.Data.DataColumn("WHBI_MName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_MName);
                this.columnWHBI_MSpec = new global::System.Data.DataColumn("WHBI_MSpec", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_MSpec);
                this.columnWHBI_MUnit = new global::System.Data.DataColumn("WHBI_MUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_MUnit);
                this.columnWHBI_RNum = new global::System.Data.DataColumn("WHBI_RNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_RNum);
                this.columnWHBI_BNum = new global::System.Data.DataColumn("WHBI_BNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_BNum);
                this.columnWHBI_MNum = new global::System.Data.DataColumn("WHBI_MNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_MNum);
                this.columnWHBI_LNum = new global::System.Data.DataColumn("WHBI_LNum", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_LNum);
                this.columnWHBI_Type = new global::System.Data.DataColumn("WHBI_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_Type);
                this.columnWHBI_RType = new global::System.Data.DataColumn("WHBI_RType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_RType);
                this.columnWHBI_Date = new global::System.Data.DataColumn("WHBI_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_Date);
                this.columnWHBI_Owner = new global::System.Data.DataColumn("WHBI_Owner", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_Owner);
                this.columnWHBI_Bak = new global::System.Data.DataColumn("WHBI_Bak", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBI_Bak);
                this.columnWHBM_WName = new global::System.Data.DataColumn("WHBM_WName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBM_WName);
                this.columnWHBM_WCode = new global::System.Data.DataColumn("WHBM_WCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBM_WCode);
                this.columnWHBM_Company = new global::System.Data.DataColumn("WHBM_Company", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBM_Company);
                this.columnWHBM_CompanyCode = new global::System.Data.DataColumn("WHBM_CompanyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWHBM_CompanyCode);
                this.columnWHBI_Code.MaxLength = 20;
                this.columnWHBI_BCode.MaxLength = 20;
                this.columnWHBI_WCode.MaxLength = 20;
                this.columnWHBI_WName.MaxLength = 50;
                this.columnWHBI_WNo.MaxLength = 50;
                this.columnWHBI_WNoName.MaxLength = 50;
                this.columnWHBI_MCode.MaxLength = 20;
                this.columnWHBI_MName.MaxLength = 50;
                this.columnWHBI_MSpec.MaxLength = 20;
                this.columnWHBI_MUnit.MaxLength = 20;
                this.columnWHBI_Type.MaxLength = 20;
                this.columnWHBI_RType.MaxLength = 20;
                this.columnWHBI_Owner.MaxLength = 50;
                this.columnWHBI_Bak.MaxLength = 200;
                this.columnWHBM_WName.MaxLength = 50;
                this.columnWHBM_WCode.MaxLength = 20;
                this.columnWHBM_Company.MaxLength = 50;
                this.columnWHBM_CompanyCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_StockCheckNewRow NewVRpt_StockCheckNewRow() {
                return ((VRpt_StockCheckNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VRpt_StockCheckNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VRpt_StockCheckNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VRpt_StockCheckNewRowChanged != null)) {
                    this.VRpt_StockCheckNewRowChanged(this, new VRpt_StockCheckNewRowChangeEvent(((VRpt_StockCheckNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VRpt_StockCheckNewRowChanging != null)) {
                    this.VRpt_StockCheckNewRowChanging(this, new VRpt_StockCheckNewRowChangeEvent(((VRpt_StockCheckNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VRpt_StockCheckNewRowDeleted != null)) {
                    this.VRpt_StockCheckNewRowDeleted(this, new VRpt_StockCheckNewRowChangeEvent(((VRpt_StockCheckNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VRpt_StockCheckNewRowDeleting != null)) {
                    this.VRpt_StockCheckNewRowDeleting(this, new VRpt_StockCheckNewRowChangeEvent(((VRpt_StockCheckNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVRpt_StockCheckNewRow(VRpt_StockCheckNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StockCheckNew ds = new StockCheckNew();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VRpt_StockCheckNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VRpt_StockCheckNewRow : global::System.Data.DataRow {
            
            private VRpt_StockCheckNewDataTable tableVRpt_StockCheckNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VRpt_StockCheckNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVRpt_StockCheckNew = ((VRpt_StockCheckNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_Code {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_Code”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_BCode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_BCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_BCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_BCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_WCode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_WCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_WCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_WCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_WName {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_WNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_WName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_WNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_WNo {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_WNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_WNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_WNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_WNoName {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_WNoNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_WNoName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_WNoNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_MCode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_MCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_MCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_MCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_MName {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_MNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_MName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_MNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_MSpec {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_MSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_MSpec”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_MSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_MUnit {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_MUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_MUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_MUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WHBI_RNum {
                get {
                    try {
                        return ((decimal)(this[this.tableVRpt_StockCheckNew.WHBI_RNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_RNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_RNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WHBI_BNum {
                get {
                    try {
                        return ((decimal)(this[this.tableVRpt_StockCheckNew.WHBI_BNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_BNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_BNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WHBI_MNum {
                get {
                    try {
                        return ((decimal)(this[this.tableVRpt_StockCheckNew.WHBI_MNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_MNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_MNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal WHBI_LNum {
                get {
                    try {
                        return ((decimal)(this[this.tableVRpt_StockCheckNew.WHBI_LNumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_LNum”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_LNumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_Type {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_Type”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_RType {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_RTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_RType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_RTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime WHBI_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableVRpt_StockCheckNew.WHBI_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_Date”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_Owner {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_OwnerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_Owner”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_OwnerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBI_Bak {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBI_BakColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBI_Bak”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBI_BakColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBM_WName {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBM_WNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBM_WName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBM_WNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBM_WCode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBM_WCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBM_WCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBM_WCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBM_Company {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBM_CompanyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBM_Company”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBM_CompanyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WHBM_CompanyCode {
                get {
                    try {
                        return ((string)(this[this.tableVRpt_StockCheckNew.WHBM_CompanyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“VRpt_StockCheckNew”中列“WHBM_CompanyCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableVRpt_StockCheckNew.WHBM_CompanyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_CodeNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_CodeNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_BCodeNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_BCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_BCodeNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_BCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_WCodeNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_WCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_WCodeNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_WCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_WNameNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_WNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_WNameNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_WNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_WNoNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_WNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_WNoNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_WNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_WNoNameNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_WNoNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_WNoNameNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_WNoNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_MCodeNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_MCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_MCodeNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_MCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_MNameNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_MNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_MNameNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_MNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_MSpecNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_MSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_MSpecNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_MSpecColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_MUnitNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_MUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_MUnitNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_MUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_RNumNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_RNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_RNumNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_RNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_BNumNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_BNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_BNumNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_BNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_MNumNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_MNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_MNumNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_MNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_LNumNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_LNumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_LNumNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_LNumColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_TypeNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_TypeNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_RTypeNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_RTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_RTypeNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_RTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_DateNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_DateNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_OwnerNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_OwnerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_OwnerNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_OwnerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBI_BakNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBI_BakColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBI_BakNull() {
                this[this.tableVRpt_StockCheckNew.WHBI_BakColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBM_WNameNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBM_WNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBM_WNameNull() {
                this[this.tableVRpt_StockCheckNew.WHBM_WNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBM_WCodeNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBM_WCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBM_WCodeNull() {
                this[this.tableVRpt_StockCheckNew.WHBM_WCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBM_CompanyNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBM_CompanyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBM_CompanyNull() {
                this[this.tableVRpt_StockCheckNew.WHBM_CompanyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWHBM_CompanyCodeNull() {
                return this.IsNull(this.tableVRpt_StockCheckNew.WHBM_CompanyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWHBM_CompanyCodeNull() {
                this[this.tableVRpt_StockCheckNew.WHBM_CompanyCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VRpt_StockCheckNewRowChangeEvent : global::System.EventArgs {
            
            private VRpt_StockCheckNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_StockCheckNewRowChangeEvent(VRpt_StockCheckNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VRpt_StockCheckNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace QX.UI.Data.StockCheckNewTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class VRpt_StockCheckNewTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public VRpt_StockCheckNewTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "VRpt_StockCheckNew";
            tableMapping.ColumnMappings.Add("WHBI_Code", "WHBI_Code");
            tableMapping.ColumnMappings.Add("WHBI_BCode", "WHBI_BCode");
            tableMapping.ColumnMappings.Add("WHBI_WCode", "WHBI_WCode");
            tableMapping.ColumnMappings.Add("WHBI_WName", "WHBI_WName");
            tableMapping.ColumnMappings.Add("WHBI_WNo", "WHBI_WNo");
            tableMapping.ColumnMappings.Add("WHBI_WNoName", "WHBI_WNoName");
            tableMapping.ColumnMappings.Add("WHBI_MCode", "WHBI_MCode");
            tableMapping.ColumnMappings.Add("WHBI_MName", "WHBI_MName");
            tableMapping.ColumnMappings.Add("WHBI_MSpec", "WHBI_MSpec");
            tableMapping.ColumnMappings.Add("WHBI_MUnit", "WHBI_MUnit");
            tableMapping.ColumnMappings.Add("WHBI_RNum", "WHBI_RNum");
            tableMapping.ColumnMappings.Add("WHBI_BNum", "WHBI_BNum");
            tableMapping.ColumnMappings.Add("WHBI_MNum", "WHBI_MNum");
            tableMapping.ColumnMappings.Add("WHBI_LNum", "WHBI_LNum");
            tableMapping.ColumnMappings.Add("WHBI_Type", "WHBI_Type");
            tableMapping.ColumnMappings.Add("WHBI_RType", "WHBI_RType");
            tableMapping.ColumnMappings.Add("WHBI_Date", "WHBI_Date");
            tableMapping.ColumnMappings.Add("WHBI_Owner", "WHBI_Owner");
            tableMapping.ColumnMappings.Add("WHBI_Bak", "WHBI_Bak");
            tableMapping.ColumnMappings.Add("WHBM_WName", "WHBM_WName");
            tableMapping.ColumnMappings.Add("WHBM_WCode", "WHBM_WCode");
            tableMapping.ColumnMappings.Add("WHBM_Company", "WHBM_Company");
            tableMapping.ColumnMappings.Add("WHBM_CompanyCode", "WHBM_CompanyCode");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings["LAFA20101112ConnectionString"].ConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT WHBI_Code, WHBI_BCode, WHBI_WCode, WHBI_WName, WHBI_WNo, WHBI_WNoName, WHBI_MCode, WHBI_MName, WHBI_MSpec, WHBI_MUnit, WHBI_RNum, WHBI_BNum, WHBI_MNum, WHBI_LNum, WHBI_Type, WHBI_RType, WHBI_Date, WHBI_Owner, WHBI_Bak, WHBM_WName, WHBM_WCode, WHBM_Company, WHBM_CompanyCode FROM dbo.VRpt_StockCheckNew";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(StockCheckNew.VRpt_StockCheckNewDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StockCheckNew.VRpt_StockCheckNewDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            StockCheckNew.VRpt_StockCheckNewDataTable dataTable = new StockCheckNew.VRpt_StockCheckNewDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(StockCheckNew dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(StockCheckNew dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(StockCheckNew dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(StockCheckNew dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager 不包含任何连接信息。请将每个 TableAdapterManager TableAdapter 属性设置为有效的 Tabl" +
                        "eAdapter 实例。");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("事务无法开始。当前的数据连接不支持事务或当前状态不允许事务开始。");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591